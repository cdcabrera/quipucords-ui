// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScansContext should apply a hook for retrieving data from multiple selectors: selector responses 1`] = `
Object {
  "errorResponse": Object {
    "data": Array [],
    "date": undefined,
    "error": true,
    "errorMessage": "Lorem ipsum",
    "expandedRows": undefined,
    "fulfilled": undefined,
    "hasData": false,
    "pending": undefined,
    "selectedRows": undefined,
    "totalResults": 0,
  },
  "fulfilledResponse": Object {
    "data": Array [
      "dolor",
      "sit",
    ],
    "date": undefined,
    "error": undefined,
    "errorMessage": undefined,
    "expandedRows": undefined,
    "fulfilled": true,
    "hasData": false,
    "pending": undefined,
    "selectedRows": undefined,
    "totalResults": 0,
  },
  "mockStoreSuccessResponse": Object {
    "data": Array [
      "lorem",
      "ipsum",
    ],
    "date": undefined,
    "error": false,
    "errorMessage": null,
    "expandedRows": Object {},
    "fulfilled": true,
    "hasData": false,
    "pending": false,
    "selectedRows": Object {},
    "totalResults": 0,
  },
  "pendingResponse": Object {
    "data": Array [],
    "date": undefined,
    "error": undefined,
    "errorMessage": undefined,
    "expandedRows": undefined,
    "fulfilled": undefined,
    "hasData": false,
    "pending": true,
    "selectedRows": undefined,
    "totalResults": 0,
  },
}
`;

exports[`ScansContext should apply a hook for returning a get response: get responses 1`] = `
Object {
  "errorResponse": Object {
    "error": true,
    "message": "Lorem ipsum",
  },
  "fulfilledResponse": Object {
    "data": Object {
      "view": Object {
        "results": Array [
          "dolor",
          "sit",
        ],
      },
    },
    "fulfilled": true,
  },
  "mockStoreSuccessResponse": Object {
    "data": Array [
      "lorem",
      "ipsum",
    ],
    "date": undefined,
    "error": false,
    "errorMessage": null,
    "expandedRows": Object {},
    "fulfilled": true,
    "hasData": false,
    "pending": false,
    "selectedRows": Object {},
    "totalResults": 0,
  },
  "pendingResponse": Object {
    "pending": true,
  },
}
`;

exports[`ScansContext should attempt to poll scans: timeout 1`] = `
Array [
  Array [
    Object {
      "callback": false,
      "interval": 0,
    },
  ],
  Array [
    Object {
      "callback": false,
      "interval": 0,
    },
  ],
]
`;

exports[`ScansContext should handle scan actions with multiple callbacks: callbacks 1`] = `
Object {
  "onCancel": [Function],
  "onDownload": [Function],
  "onPause": [Function],
  "onRestart": [Function],
  "onStart": [Function],
}
`;

exports[`ScansContext should handle scan actions with multiple callbacks: dispatch onStart 1`] = `
Array [
  Array [
    Object {
      "meta": Object {
        "id": "lorem ipsum base id",
      },
      "payload": Promise {},
      "type": "START_SCAN",
    },
  ],
]
`;

exports[`ScansContext should return specific properties: specific properties 1`] = `
Object {
  "INITIAL_QUERY": Object {
    "ordering": "name",
    "page": 1,
    "page_size": 10,
    "scan_type": "inspect",
  },
  "VIEW_ID": "scans",
  "useGetScans": [Function],
  "useOnExpand": [Function],
  "useOnScanAction": [Function],
  "useOnSelect": [Function],
  "usePoll": [Function],
  "useScans": [Function],
}
`;
